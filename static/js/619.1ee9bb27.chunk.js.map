{"version":3,"file":"static/js/619.1ee9bb27.chunk.js","mappings":"wQAEaA,EAAOC,EAAAA,GAAAA,KAAH,4HAOJC,EAAmBD,EAAAA,GAAAA,OAAH,+QAahBE,EAAkBF,EAAAA,GAAAA,MAAH,mFAKfG,EAAkBH,EAAAA,GAAAA,MAAH,qL,2BCdfI,EAAc,WACzB,OAAkCC,EAAAA,EAAAA,UAAS,CAAEC,KAAM,GAAIC,OAAQ,KAA/D,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IAEvBC,EAAe,SAAAC,GAAG,OACtBP,GAAa,SAAAQ,GAAG,yBAAUA,GAAV,cAAgBD,EAAIE,OAAOZ,KAAOU,EAAIE,OAAOC,OAA7C,GADM,EAmBhBb,EAAiBE,EAAjBF,KAAMC,EAAWC,EAAXD,OAEd,OACE,+BACE,UAACR,EAAD,CAAMqB,SAVe,SAAAJ,GACvBA,EAAIK,iBAXgB,SAAAC,GAGpB,GAFoBV,EAASW,MAAK,SAAAC,GAAO,OAAIA,EAAQlB,OAASgB,EAAKhB,IAA1B,IAGvC,OAAOmB,MAAM,GAAD,OAAIH,EAAKhB,KAAT,4BAEdoB,QAAQC,IAAIL,GACZZ,GAASkB,EAAAA,EAAAA,KAAY,UAAKN,IAC3B,CAICO,CAAcrB,GACdC,EAAa,CAAEH,KAAM,GAAIC,OAAQ,IAClC,EAMG,WACE,UAACJ,EAAD,mBAEE,SAACD,EAAD,CACEI,KAAK,OACLwB,KAAK,OACLX,MAAOb,EACPyB,SAAUhB,EACViB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,UAAC/B,EAAD,qBAEE,SAACD,EAAD,CACEI,KAAK,SACLwB,KAAK,MACLX,MAAOZ,EACPyB,QAAQ,yFACRC,MAAM,+FACNF,SAAUhB,EACVmB,UAAQ,QAGZ,SAACjC,EAAD,CAAkB6B,KAAK,SAAvB,6BAIP,ECrEYK,EAAanC,EAAAA,GAAAA,GAAH,mFAKVoC,EAAiBpC,EAAAA,GAAAA,OAAH,8QAadqC,EAAarC,EAAAA,GAAAA,GAAH,qLASVsC,EAActC,EAAAA,GAAAA,MAAH,+CAGXuC,EAAUvC,EAAAA,GAAAA,EAAH,+C,SCnBPwC,EAAe,WAC1B,IAAM9B,GAAWC,EAAAA,EAAAA,MACX8B,GAAS5B,EAAAA,EAAAA,IAAY6B,EAAAA,IAMrBC,GALW9B,EAAAA,EAAAA,IAAYC,EAAAA,IAKK2B,QAAO,SAAAG,GAAI,OAC3CA,EAAKtC,KAAKuC,cAAcC,SAASL,EAAOI,cADG,IAI7C,OACE,iCACE,SAACN,EAAD,qCACA,SAACD,EAAD,CAAaR,KAAK,OAAOX,MAAOsB,EAAQV,SAVjB,SAAAf,GACzBN,GAASqC,EAAAA,EAAAA,IAAe/B,EAAIE,OAAOC,OACpC,KASG,SAACgB,EAAD,UACGQ,EAAiBK,KAAI,gBAAGC,EAAH,EAAGA,GAAI3C,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACpB,UAAC8B,EAAD,YACE,4BAAO/B,EAAP,UACA,iCAASC,EAAT,QACA,SAAC6B,EAAD,CACEN,KAAK,SACLoB,QAAS,kBAAMxC,GAASyC,EAAAA,EAAAA,IAAeF,GAA9B,EAFX,sBAHeA,EADG,QAe7B,EChCc,SAASG,IACtB,IAAM1C,GAAWC,EAAAA,EAAAA,MACX0C,GAAYxC,EAAAA,EAAAA,IAAYyC,EAAAA,IAM9B,OAJAC,EAAAA,EAAAA,YAAU,WACR7C,GAAS8C,EAAAA,EAAAA,MACV,GAAE,CAAC9C,KAGF,iCACE,4BACE,uCACA,SAACN,EAAD,QAEF,yBAAMiD,GAAa,4BACnB,sCACA,SAACb,EAAD,MAGL,C","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Form = styled.form`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 10px;\n`;\nexport const AddContactButton = styled.button`\n  margin-left: 220px;\n  width: fit-content;\n  border: 1px solid;\n  background-color: transparent;\n  border-radius: 4px;\n  &:hover {\n    background-color: #2196f3;\n    border: 1px solid #2196f3;\n    color: #fff;\n    cursor: pointer;\n  }\n`;\nexport const AddContactInput = styled.input`\n  height: 20px;\n  flex: 0 0 200px;\n  margin-left: 10px;\n`;\nexport const AddContactLabel = styled.label`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  text-align: right;\n  width: 400px;\n  line-height: 26px;\n  margin-bottom: 10px;\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// import { nanoid } from 'nanoid';\nimport {\n  Form,\n  AddContactButton,\n  AddContactInput,\n  AddContactLabel,\n} from './ContactForm.styled';\nimport { addContacts } from 'redux/contacts/operations';\nimport { getContacts } from '../../redux/contacts/contactsSlice';\n\nexport const ContactForm = () => {\n  const [formValue, setFormValue] = useState({ name: '', number: '' });\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = evt =>\n    setFormValue(val => ({ ...val, [evt.target.name]: evt.target.value }));\n\n  const checkContacts = data => {\n    const findContact = contacts.some(contact => contact.name === data.name);\n\n    if (findContact) {\n      return alert(`${data.name} is already in contacts`);\n    }\n    console.log(data);\n    dispatch(addContacts({ ...data }));\n  };\n\n  const handleSubmitForm = evt => {\n    evt.preventDefault();\n    checkContacts(formValue);\n    setFormValue({ name: '', number: '' });\n  };\n\n  const { name, number } = formValue;\n\n  return (\n    <>\n      <Form onSubmit={handleSubmitForm}>\n        <AddContactLabel>\n          Name\n          <AddContactInput\n            name=\"name\"\n            type=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </AddContactLabel>\n        <AddContactLabel>\n          Number\n          <AddContactInput\n            name=\"number\"\n            type=\"tel\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            onChange={handleChange}\n            required\n          />\n        </AddContactLabel>\n        <AddContactButton type=\"submit\">Add contact</AddContactButton>\n      </Form>\n    </>\n  );\n};\n","import styled from 'styled-components';\nexport const ContactsUl = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const ContactsButton = styled.button`\n  margin-left: 10px;\n  width: fit-content;\n  border: 1px solid;\n  background-color: transparent;\n  border-radius: 4px;\n  &:hover {\n    background-color: #2196f3;\n    border: 1px solid #2196f3;\n    color: #fff;\n    cursor: pointer;\n  }\n`;\nexport const ContactsLi = styled.li`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  text-align: right;\n  width: 400px;\n  line-height: 26px;\n  margin-bottom: 10px;\n`;\nexport const InputFilter = styled.input`\n  margin-left: 200px;\n`;\nexport const FilterP = styled.p`\n  margin-left: 200px;\n`;\n","import {\n  ContactsUl,\n  ContactsLi,\n  ContactsButton,\n  FilterP,\n  InputFilter,\n} from './ContactsList.styled';\nimport { deleteContacts } from '../../redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/contacts/contactsSlice';\nimport { filterContacts, getFilter } from '../../redux/contacts/filterSlice';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const contacts = useSelector(getContacts);\n\n  const handleFilterChange = evt => {\n    dispatch(filterContacts(evt.target.value));\n  };\n  const filteredContacts = contacts.filter(text =>\n    text.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <>\n      <FilterP>Find contacts by name</FilterP>\n      <InputFilter type=\"text\" value={filter} onChange={handleFilterChange} />\n      <ContactsUl>\n        {filteredContacts.map(({ id, name, number }) => (\n          <ContactsLi key={id}>\n            <span>{name} : </span>\n            <span> ({number})</span>\n            <ContactsButton\n              type=\"button\"\n              onClick={() => dispatch(deleteContacts(id))}\n            >\n              Remove\n            </ContactsButton>\n          </ContactsLi>\n        ))}\n      </ContactsUl>\n    </>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getIsLoading } from 'redux/contacts/contactsSlice';\nimport { fetchContacts } from 'redux/contacts/operations';\n// import { Helmet } from 'react-helmet';\n// import { TaskList } from 'components/TaskList/TaskList';\n// import { TaskEditor } from 'components/TaskEditor/TaskEditor';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { selectLoading } from 'redux/tasks/selectors';\nimport { ContactsList } from './../components/ContactsList/ContactsList';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <div>\n        <h2>Phonebook</h2>\n        <ContactForm />\n      </div>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <h2>Contacts</h2>\n      <ContactsList />\n    </>\n  );\n}\n\n// <Helmet>\n// <title>Your tasks</title>\n//   </Helmet>\n"],"names":["Form","styled","AddContactButton","AddContactInput","AddContactLabel","ContactForm","useState","name","number","formValue","setFormValue","dispatch","useDispatch","contacts","useSelector","getContacts","handleChange","evt","val","target","value","onSubmit","preventDefault","data","some","contact","alert","console","log","addContacts","checkContacts","type","onChange","pattern","title","required","ContactsUl","ContactsButton","ContactsLi","InputFilter","FilterP","ContactsList","filter","getFilter","filteredContacts","text","toLowerCase","includes","filterContacts","map","id","onClick","deleteContacts","Contacts","isLoading","getIsLoading","useEffect","fetchContacts"],"sourceRoot":""}